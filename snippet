    //use our locations in isUsedUs grid to pathfind
    for (int i = 0; i < boardSize; i++) {
        for(int j = 0; j < boardSize; j++) {
            if(isUsedUs[i*boardSize+j] == true)
                isReachable[i][j] = -1;
        }
    }

    bool isValid(int oldX, int oldY, int newX, int newY) {
    for(int i = 0; i<3; i++) {
        int ny = oldY + dy[i];
        int nx = oldX + 1;
        if (ny == newY && nx == newX) {
            return true;
        }
    
    }
    return false;
}

bool foundPathHelper(int x, int prevY) {
    if(x >= boardSize) { // greater than to be safe
        return true;
    }
    if(pathFinder[x].size() == 0) {
        return false;
    }
    if(x == 0) {
        for (int i = 0; i < pathFinder[x].size(); i++) {
            return foundPathHelper(x+1, pathFinder[x].at(i));
        }
    } else if(x > 0 && x <= 6) {
        for (int i = 0; i < pathFinder[x].size(); i++) {
            if(isValid (x-1, prevY, x, pathFinder[x].at(i))) {
                return foundPathHelper(x+1, pathFinder[x].at(i));
            }
        }
    }
    return false;
}

bool foundPath() {
    for(int i=0; i<tempPathSize; i++) {
        int key = tempPath.at(i);
        int x = modifiedBoard[key/boardSize].at(key%boardSize).x;
        int y = modifiedBoard[key/boardSize].at(key%boardSize).y;
        pathFinder[x].push_back(y);
    }
    return foundPathHelper(0, 0);
}


int manhattan(int x1, int y1, int x2, int y2) {
    return(abs(x1-x2)+abs(y1-y2));
}

